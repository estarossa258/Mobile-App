import {
  __commonJS
} from "./chunk-OROXOI2D.js";

// node_modules/local-storage/stub.js
var require_stub = __commonJS({
  "node_modules/local-storage/stub.js"(exports, module) {
    "use strict";
    var ms = {};
    function getItem(key) {
      return key in ms ? ms[key] : null;
    }
    function setItem(key, value) {
      ms[key] = value;
      return true;
    }
    function removeItem(key) {
      var found = key in ms;
      if (found) {
        return delete ms[key];
      }
      return false;
    }
    function clear() {
      ms = {};
      return true;
    }
    module.exports = {
      getItem,
      setItem,
      removeItem,
      clear
    };
  }
});

// node_modules/local-storage/parse.js
var require_parse = __commonJS({
  "node_modules/local-storage/parse.js"(exports, module) {
    "use strict";
    function parse(rawValue) {
      const parsed = parseValue(rawValue);
      if (parsed === void 0) {
        return null;
      }
      return parsed;
    }
    function parseValue(rawValue) {
      try {
        return JSON.parse(rawValue);
      } catch (err) {
        return rawValue;
      }
    }
    module.exports = parse;
  }
});

// node_modules/local-storage/tracking.js
var require_tracking = __commonJS({
  "node_modules/local-storage/tracking.js"(exports, module) {
    "use strict";
    var parse = require_parse();
    var listeners = {};
    var listening = false;
    function listen() {
      if (global.addEventListener) {
        global.addEventListener("storage", change, false);
      } else if (global.attachEvent) {
        global.attachEvent("onstorage", change);
      } else {
        global.onstorage = change;
      }
    }
    function change(e) {
      if (!e) {
        e = global.event;
      }
      var all = listeners[e.key];
      if (all) {
        all.forEach(fire);
      }
      function fire(listener) {
        listener(parse(e.newValue), parse(e.oldValue), e.url || e.uri);
      }
    }
    function on(key, fn) {
      if (listeners[key]) {
        listeners[key].push(fn);
      } else {
        listeners[key] = [fn];
      }
      if (listening === false) {
        listen();
      }
    }
    function off(key, fn) {
      var ns = listeners[key];
      if (ns.length > 1) {
        ns.splice(ns.indexOf(fn), 1);
      } else {
        listeners[key] = [];
      }
    }
    module.exports = {
      on,
      off
    };
  }
});

// node_modules/local-storage/local-storage.js
var require_local_storage = __commonJS({
  "node_modules/local-storage/local-storage.js"(exports, module) {
    "use strict";
    var stub = require_stub();
    var parse = require_parse();
    var tracking = require_tracking();
    var ls = "localStorage" in global && global.localStorage ? global.localStorage : stub;
    function accessor(key, value) {
      if (arguments.length === 1) {
        return get(key);
      }
      return set(key, value);
    }
    function get(key) {
      const raw = ls.getItem(key);
      const parsed = parse(raw);
      return parsed;
    }
    function set(key, value) {
      try {
        ls.setItem(key, JSON.stringify(value));
        return true;
      } catch (e) {
        return false;
      }
    }
    function remove(key) {
      return ls.removeItem(key);
    }
    function clear() {
      return ls.clear();
    }
    function backend(store) {
      store && (ls = store);
      return ls;
    }
    accessor.set = set;
    accessor.get = get;
    accessor.remove = remove;
    accessor.clear = clear;
    accessor.backend = backend;
    accessor.on = tracking.on;
    accessor.off = tracking.off;
    module.exports = accessor;
  }
});

// dep:local-storage
var local_storage_default = require_local_storage();
export {
  local_storage_default as default
};
//# sourceMappingURL=local-storage.js.map
